DemoBlog_Ruby_On_Rails_Project:

1.At first create the project by run this command in Command prompt with ruby on rails:
=>rails new DemoBlog_Ruby_On_Rails_Project:

=>git init

=>git status

=>git add .

=>git status

=>git commit -m "Initial commit"

Now run the server:
=>rails s



2.Now added this code in "GEMFILE":
https://rubygems.org/gems/better_errors/versions/2.4.0
https://rubygems.org/gems/bulma-rails/versions/0.6.2
https://rubygems.org/gems/simple_form/versions/3.5.1
https://rubygems.org/gems/guard/versions/2.14.2
https://rubygems.org/gems/guard-livereload/versions/2.5.2
# Make errors better looking
gem 'better_errors', '~> 2.4'

# Bulma CSS 
gem 'bulma-rails', '~> 0.6.2'

# Simple Form
gem 'simple_form', '~> 3.5', '>= 3.5.1'


group :development do
  # Guard is a command line tool to easily handle events on file system modifications.
  gem 'guard', '~> 2.14', '>= 2.14.2'
  # Guard::LiveReload automatically reloads your browser when 'view' files are modified
  gem 'guard-livereload', '~> 2.5', '>= 2.5.2'
end


Now run in the cmd
=>bundle

For generate Simple Form Run this command:
=>rails generate simple_form:install


https://github.com/guard/guard-livereload
added also  ", require: false"

group :development do
  # Guard is a command line tool to easily handle events on file system modifications.
  gem 'guard', '~> 2.14', '>= 2.14.2'
  # Guard::LiveReload automatically reloads your browser when 'view' files are modified
  gem 'guard-livereload', '~> 2.5', '>= 2.5.2', require: false
end


Again Now run in the cmd
=>bundle

Every time when added gemfile then restart the server.


Now run:  http://localhost:3000/  and shown that still all work ok.

# Add guard definition to your Guardfile by running this command:

=>guard init livereload

after run this command we shown that like "GEMFILE" also create a "Guardfile" in our project.

Download the livereload browser extension for your browser.
http://livereload.com/extensions/

Now run this command:
=>bundle exec guard

=>gem install win32console

https://rubygems.org/gems/wdm/versions/0.1.1
#Windows Directory Monitor (WDM) is a library which can be used to monitor directories for changes. It's mostly implemented in C and uses the Win32 API for a better performance.

Please add the following to your Gemfile to avoid polling for changes.

gem 'wdm', '~> 0.1.1'      

if Gem.win_Platform?

=>bundle

Now run this command:
=>bundle exec guard

Now run:  http://localhost:3000/  and shown that still all work ok.



3.Now Creating a Rails controller:
rails generate controller ControllerName.
controller names is plural.
=>rails g controller posts


Added this code in controller>post_controoler.rb:
	def index
	end

In view>posts  create a html file  index.html.erb  and write this code:
<h1 class="title">Blog Index</h1>


Added this code in config>routes.rb:
  resources :posts
  root "posts#index"


https://rubygems.org/gems/coffee-script-source/versions/1.8.0
CoffeeScript is a little language that compiles into JavaScript.
Underneath all of those embarrassing braces and semicolons, JavaScript
has always had a gorgeous object model at its heart. CoffeeScript is an
attempt to expose the good parts of JavaScript in a simple way.

Here we fall in a error problem:
""ExecJS::ProgramError""

[   <%= stylesheet_link_tag    'application', media: 'all',
'data-turbolinks-track': 'reload' %>
<%= javascript_include_tag 'application', 'data-turbolinks-track':
'reload' %>   ]= This code is situated in layouts=>application.html.erb
For this code we fall in a error problem:
"ExecJS::ProgramError"

now how to Solve:
Added this in the "Gemfile":
#For Windows it works with CofferScript v1.8
gem 'coffee-script-source', '1.8.0'

and then:
=>bundle update coffee-script-source


Now run:  http://localhost:3000/  and shown that still all work ok.


4.Now Rename assets>stylesheets>application.css
to "application.scss"  and add this:

@import "bulma";

Now run this command:
=>bundle exec guard

Now run:  http://localhost:3000/  and shown that css still working.



Added this code in controller>post_controoler.rb:
	def new
	end

	def create
	end
	
	
5.Now Creating a Rails model:
rails generate model ModelName attribute:type
model names are singular.
=>rails generate model Post title:string content:text
This Post model corresponds to the messages table in the database.

=>rake db:migrate
Update our current application, recent model changes.


=>git add .
=>git commit -m "Add Post Model"



Added this code in controller>post_controoler.rb:
	def new
		@post = Post.new
	end

	def create
		@post = Post.new(post_params)

		if @post.save
			redirect_to @post
		else
			render 'new'
		end
	end

	private

	def post_params
		params.require(:post).permit(:title, :content)
	end


In view>posts  create a html file  new.html.erb  and write this code:

<h1 class="title">New Post</h1>

<div class="section">
	<%= simple_form_for @post do |f| %>
	<div class="field">
		<div class="control">
			<%= f.input :title, input_html: { class: 'input' }, wrapper: false, label_html: { class: 'label'} %>
		</div>
	</div>
	<div class="field">
		<div class="control">
			<%= f.input :content, input_html: { class: 'textarea' }, wrapper: false, label_html: { class: 'label'} %>
		</div>
	</div>
	<%= f.button :submit, "Create new post", class: "button is-primary" %>
	<% end %>
</div>


Now Run http://localhost:3000/posts/new and show the form.



Added this code in controller>post_controoler.rb:

	def show
		@post = Post.find(params[:id])
	end
	
In view>posts  create a html file  show.html.erb  and write this code:

<section class="section">
	<div class="container">
		<h1 class="title">
			<%= @post.title %>
		</h1>
		<div class="content">
			<%= @post.content %>
		</div>
	</div> 
</section>

Now Run  http://localhost:3000/posts/1 and show the output.


Added this code in controller>post_controoler.rb:
	def index
		@posts = Post.all.order("created_at DESC")
	end
	

In view>posts>index.html.erb write this code:	
<% content_for :page_title,  "Index" %>
	<div class="section">
    <div class="container">
        <% @posts.each do |post| %>
            <div class="card">
          <div class="card-content">
            <div class="media">
              <div class="media-content">
                <p class="title is-4"><%= link_to post.title, post  %></p>
              </div>
            </div>
            <div class="content">
                 <%= post.content %>
            </div>
          </div>
        </div>
        <% end %>
    </div>
  </div>
  
  
  
Added this code in layouts>application.html.erb:
<!DOCTYPE html>
<html>
  <head>
    <title>DemoBlogRubyOnRailsProject</title>
    <%= csrf_meta_tags %>

    <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>

  <body>

  <section class="hero is-primary is-medium">
      <!-- Hero head: will stick at the top -->
      <div class="hero-head">
        <nav class="navbar">
          <div class="container">
            <div class="navbar-brand">
              <%= link_to 'Demo Blog', root_path, class: "navbar-item" %>
              <span class="navbar-burger burger" data-target="navbarMenuHeroA">
                <span></span>
                <span></span>
                <span></span>
              </span>
            </div>
            <div id="navbarMenuHeroA" class="navbar-menu">
              <div class="navbar-end">
                <%= link_to "Create New Post", new_post_path, class:"navbar-item" %>
              </div>
            </div>
          </div>
        </nav>
      </div>

      <!-- Hero content: will be in the middle -->
      <div class="hero-body">
        <div class="container has-text-centered">
          <h1 class="title">
            <%= yield :page_title %>
          </h1>
        </div>
      </div>
    </section>

    <%= yield %>
  </body>
</html>


Similar index.html.erb:	
<% content_for :page_title,  "Index" %>


Write the code is:
In view>posts>new.html.erb write this code:	
<% content_for :page_title,  "Create a New Post" %>

and,
Write the code is:
In view>posts>show.html.erb write this code:	
<% content_for :page_title,  @post.title %>

Now remove the code from view>posts>show.html.erb, because we added the previous line code

 	<h1 class="title">
		<%= @post.title %>
	</h1>
	
	
Added this code in controller>post_controoler.rb:
	
	def update
		@post = Post.find(params[:id])

		if @post.update(post_params)
			redirect_to @post
		else
			render 'edit'
		end
	end


	def edit
		@post = Post.find(params[:id])
	end

	
6.
Now In view>posts>show.html.erb write this code remove the previous code:
<% content_for :page_title, @post.title %>

<section class="section">
    <div class="container">
        <nav class="level">
          <!-- Left side -->
          <div class="level-left">
            <p class="level-item">
                <strong>Actions</strong>
            </p>
          </div>
          <!-- Right side -->
          <div class="level-right">
              <p class="level-item">
                <%= link_to "Edit", edit_post_path(@post), class:"button" %>
              </p>
              <p class="level-item">
                <%= link_to "Delete", post_path(@post), method: :delete, data: { confirm: "Are you sure?" }, class:"button is-danger" %>
                </p>
          </div>
        </nav>
        <hr/>

        <div class="content">
            <%= @post.content %>
        </div>
    </div>
</section>

In view>posts  create a html file  edit.html.erb  and write this code:

<% content_for :page_title, "Edit Post" %>
<%= render 'form' %>

In view>posts  create a html file _form.html.erb and write this code:

<div class="section">
<%= simple_form_for @post do |f| %>
  <div class="field">
    <div class="control">
      <%= f.input :title, input_html: { class: 'input' }, wrapper: false, label_html: { class: 'label' } %>
    </div>
  </div>

  <div class="field">
    <div class="control">
      <%= f.input :content, input_html: { class: 'textarea' }, wrapper: false, label_html: { class: 'label' }  %>
    </div>
  </div>
  <%= f.button :submit, class: "button is-primary" %>
<% end %>
</div>


In view>posts>new.html.erb  Only 2 line code:
<% content_for :page_title,  "Create a New Post" %>

<%= render 'form' %>


Added this code in controller>post_controoler.rb:
	def destroy
        @post = Post.find(params[:id])
        @post.destroy

        redirect_to posts_path

    end

Now  run and show that all is ok.
	
7.Now Create comments controller:
=>rails g controller comments

Again create a model:
=>rails g model Comment name:string comment:text


Now
=>rails db:migrate


Write the code in model>comment.rb:
class Comment < ApplicationRecord
	belongs_to :post
end	
	
Write the code in model>post.rb:
class Post < ApplicationRecord
	has_many :comments
end


Now Added this for create comment, code in controllers>comments_controller.rb:
class CommentsController < ApplicationController

def create
        @post = Post.find(params[:post_id])
         @comment = @post.comments.create(params[:comment].permit(:name, :comment))
        redirect_to post_path(@post)
    end

    def destroy

    end   
end

Now Create Migration:
=>rails g migration AddPostIdToComments

Now write this code in migrate>add_post_id_to_comments.rb:
class AddPostIdToComments < ActiveRecord::Migration[5.1]
  def change
  	add_column :comments, :post_id, :integer
  end
end

Now At last again:
=>rails db:migrate


In view>posts>show.html.erb  write this code:
<section class="section comments">
    <div class="container">
        <h2 class="subtitle is-5"><strong><%= @post.comments.count %></strong> Comments</h2>
        <%= render @post.comments %>
        <div class="comment-form">
            <hr />
            <h3 class="subtitle is-3">Leave a reply</h3>
             <%= render 'comments/form' %>
        </div>
    </div>
</section>


Now create views>comments>    _form.html.erb  this and write the code:
<%= simple_form_for([@post, @post.comments.build]) do |f| %>
  <div class="field">
    <div class="control">
      <%= f.input :name, input_html: { class: 'input' }, wrapper: false, label_html: { class: 'label' } %>
    </div>
  </div>

  <div class="field">
    <div class="control">
      <%= f.input :comment, input_html: { class: 'textarea' }, wrapper: false, label_html: { class: 'label' }  %>
    </div>
  </div>
  <%= f.button :submit, class: "button is-primary" %>
<% end %>



Now in routes.rb:
Rails.application.routes.draw do
  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html

  resources :posts do
  	resources :comments
  end
  root "posts#index"

end



Now create views>comments>   _comment.html.erb  and write the code:
<div class="box">
  <article class="media">
    <div class="media-content">
      <div class="content">
        <p>
          <strong><%= comment.name %>:</strong>
          <%= comment.comment %>
        </p>
      </div>
    </div>
     <%= link_to 'Delete', [comment.post, comment],
                  method: :delete, class: "button is-danger", data: { confirm: 'Are you sure?' } %>
  </article>
</div>



Now Added this for Delete comment, code in controllers>comments_controller.rb:
    def destroy
        @post = Post.find(params[:post_id])
        @comment = @post.comments.find(params[:id])
        @comment.destroy
        redirect_to post_path(@post)
    end   
	
	
And At last added this in posts.controller.rb:

before_action :find_post, only: [:show, :update, :edit, :destroy]

private
	def find_post
		@post = Post.find(params[:id])
	end
	


After added this code in "posts.controller.rb"
before_action :find_post, only: [:show, :update, :edit, :destroy]	
	
no need the this line code in "posts.controller.rb"
@post = Post.find(params[:id])
	
	
	
=>rails console
=>@post = Post
=>@post.connection
=>@post.all
=>@post = Post.find(6)
=>@post
=>@post.title = "This is a updated post from command line"
=>@post.save